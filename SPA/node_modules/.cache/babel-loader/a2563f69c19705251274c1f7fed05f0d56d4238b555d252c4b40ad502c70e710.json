{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { faker } from '@faker-js/faker';\n\n// DEV ONLY!!!\nconst pause = duration => {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n};\nconst albumsApi = createApi({\n  reducerPath: 'albums',\n  //specificere hvor alt state skal gemmes i Store, 'albums' string der angiver \"key\" i storen\n  baseQuery: fetchBaseQuery({\n    //funktion der returnere et prækonfigureret version af 'fetch'\n    baseUrl: 'http://localhost:3005',\n    //adressen på json-server, der kører på port 3005 \n    fetchFn: async function () {\n      await pause(1000);\n      return fetch(...arguments);\n    } //DEV ONLY - så vi kan se spinner i aktion\n  }),\n\n  endpoints(builder) {\n    return {\n      addAlbum: builder.mutation({\n        //invalidatesTags: ['Album'],   //benytter Tags, når mutation kaldes sættes Tag til invalid og der laves et nyt fetch\n        //invalidatesTags: (result, error, user) => { return [{type: 'Album', id: user.id}];},  //dynamiske Tags\n        invalidatesTags: (result, error, user) => {\n          return [{\n            type: 'UsersAlbums',\n            id: user.id\n          }];\n        },\n        query: user => {\n          return {\n            url: '/albums',\n            method: 'POST',\n            body: {\n              userId: user.id,\n              title: faker.commerce.productName()\n            }\n          };\n        }\n      }),\n      removeAlbum: builder.mutation({\n        //invalidatesTags: ['Album'],   //benytter Tags, når mutation kaldes sættes Tag til invalid og der laves et nyt fetch\n        //invalidatesTags: (result, error, album) => { return [{type: 'Album', id: album.userId}];},  //dynamiske Tags\n        invalidatesTags: (result, error, album) => {\n          return [{\n            type: 'Album',\n            id: album.id\n          }];\n        },\n        query: album => {\n          return {\n            url: `albums/${album.id}`,\n            method: 'DELETE'\n          };\n        }\n      }),\n      fetchAlbums: builder.query({\n        // providesTags: ['Album'],  kunne benyttes, men resultere i at alle users album bliver requestet igen\n        //  providesTags: (result, error, user) => { return [{type: 'Album', id: user.id}];}, //dynamisk generering af Tag\n\n        providesTags: (result, error, user) => {\n          //her tages højde for både add og remove\n          const tags = result.map(album => {\n            return {\n              type: 'Album',\n              id: album.id\n            };\n          });\n          tags.push({\n            type: 'UsersAlbums',\n            id: user.id\n          });\n          return tags;\n        },\n        query: user => {\n          return {\n            url: '/albums',\n            params: {\n              userId: user.id\n            },\n            method: 'GET'\n          };\n        }\n      })\n    };\n  }\n});\nexport const {\n  useFetchAlbumsQuery,\n  useAddAlbumMutation,\n  useRemoveAlbumMutation\n} = albumsApi;\nexport { albumsApi };","map":{"version":3,"names":["createApi","fetchBaseQuery","faker","pause","duration","Promise","resolve","setTimeout","albumsApi","reducerPath","baseQuery","baseUrl","fetchFn","fetch","arguments","endpoints","builder","addAlbum","mutation","invalidatesTags","result","error","user","type","id","query","url","method","body","userId","title","commerce","productName","removeAlbum","album","fetchAlbums","providesTags","tags","map","push","params","useFetchAlbumsQuery","useAddAlbumMutation","useRemoveAlbumMutation"],"sources":["C:/Users/sebva/Downloads/Media-ReduxToolkitQuery/src/store/apis/albumsApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { faker } from '@faker-js/faker';\r\n\r\n\r\n// DEV ONLY!!!\r\nconst pause = (duration) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(resolve, duration);\r\n    });\r\n  };\r\n\r\nconst albumsApi = createApi({\r\n    reducerPath: 'albums',       //specificere hvor alt state skal gemmes i Store, 'albums' string der angiver \"key\" i storen\r\n    baseQuery: fetchBaseQuery({  //funktion der returnere et prækonfigureret version af 'fetch'\r\n        baseUrl: 'http://localhost:3005',  //adressen på json-server, der kører på port 3005 \r\n        fetchFn: async (...args) => {await pause(1000); return fetch(...args);} //DEV ONLY - så vi kan se spinner i aktion\r\n    }),\r\n    endpoints(builder){\r\n        return {\r\n            addAlbum: builder.mutation({\r\n              //invalidatesTags: ['Album'],   //benytter Tags, når mutation kaldes sættes Tag til invalid og der laves et nyt fetch\r\n              //invalidatesTags: (result, error, user) => { return [{type: 'Album', id: user.id}];},  //dynamiske Tags\r\n                invalidatesTags: (result, error, user) => { return [{type: 'UsersAlbums', id: user.id}];},\r\n                query: (user) =>{\r\n                    return {\r\n                        url: '/albums', \r\n                        method: 'POST',\r\n                        body: {\r\n                            userId: user.id,\r\n                            title: faker.commerce.productName()\r\n                        }\r\n                    };\r\n                }\r\n            }),\r\n            removeAlbum: builder.mutation({\r\n                //invalidatesTags: ['Album'],   //benytter Tags, når mutation kaldes sættes Tag til invalid og der laves et nyt fetch\r\n                //invalidatesTags: (result, error, album) => { return [{type: 'Album', id: album.userId}];},  //dynamiske Tags\r\n                  invalidatesTags: (result, error, album) => { return [{type: 'Album', id: album.id}];},\r\n                  query: (album) => {\r\n                      return {\r\n                          url: `albums/${album.id}`, \r\n                          method: 'DELETE'\r\n                      };\r\n                  }\r\n              }),\r\n            fetchAlbums: builder.query({\r\n             // providesTags: ['Album'],  kunne benyttes, men resultere i at alle users album bliver requestet igen\r\n            //  providesTags: (result, error, user) => { return [{type: 'Album', id: user.id}];}, //dynamisk generering af Tag\r\n                \r\n            providesTags: (result, error, user) => {  //her tages højde for både add og remove\r\n                    const tags = result.map(album => { return {type: 'Album', id: album.id} }); \r\n                    tags.push({type: 'UsersAlbums', id: user.id});\r\n                    return tags;\r\n                },\r\n\r\n                query: (user) =>{\r\n                    return {\r\n                        url: '/albums', \r\n                        params: {userId: user.id},\r\n                        method: 'GET'\r\n                    };\r\n                }\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nexport const { useFetchAlbumsQuery, useAddAlbumMutation, useRemoveAlbumMutation } = albumsApi;\r\nexport { albumsApi };"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,KAAK,QAAQ,iBAAiB;;AAGvC;AACA,MAAMC,KAAK,GAAIC,QAAQ,IAAK;EACxB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAACD,OAAO,EAAEF,QAAQ,CAAC;EAC/B,CAAC,CAAC;AACJ,CAAC;AAEH,MAAMI,SAAS,GAAGR,SAAS,CAAC;EACxBS,WAAW,EAAE,QAAQ;EAAQ;EAC7BC,SAAS,EAAET,cAAc,CAAC;IAAG;IACzBU,OAAO,EAAE,uBAAuB;IAAG;IACnCC,OAAO,EAAE,eAAAA,CAAA,EAAmB;MAAC,MAAMT,KAAK,CAAC,IAAI,CAAC;MAAE,OAAOU,KAAK,CAAC,GAAAC,SAAO,CAAC;IAAC,CAAC,CAAC;EAC5E,CAAC,CAAC;;EACFC,SAASA,CAACC,OAAO,EAAC;IACd,OAAO;MACHC,QAAQ,EAAED,OAAO,CAACE,QAAQ,CAAC;QACzB;QACA;QACEC,eAAe,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,KAAK;UAAE,OAAO,CAAC;YAACC,IAAI,EAAE,aAAa;YAAEC,EAAE,EAAEF,IAAI,CAACE;UAAE,CAAC,CAAC;QAAC,CAAC;QACzFC,KAAK,EAAGH,IAAI,IAAI;UACZ,OAAO;YACHI,GAAG,EAAE,SAAS;YACdC,MAAM,EAAE,MAAM;YACdC,IAAI,EAAE;cACFC,MAAM,EAAEP,IAAI,CAACE,EAAE;cACfM,KAAK,EAAE5B,KAAK,CAAC6B,QAAQ,CAACC,WAAW;YACrC;UACJ,CAAC;QACL;MACJ,CAAC,CAAC;MACFC,WAAW,EAAEjB,OAAO,CAACE,QAAQ,CAAC;QAC1B;QACA;QACEC,eAAe,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAEa,KAAK,KAAK;UAAE,OAAO,CAAC;YAACX,IAAI,EAAE,OAAO;YAAEC,EAAE,EAAEU,KAAK,CAACV;UAAE,CAAC,CAAC;QAAC,CAAC;QACrFC,KAAK,EAAGS,KAAK,IAAK;UACd,OAAO;YACHR,GAAG,EAAG,UAASQ,KAAK,CAACV,EAAG,EAAC;YACzBG,MAAM,EAAE;UACZ,CAAC;QACL;MACJ,CAAC,CAAC;MACJQ,WAAW,EAAEnB,OAAO,CAACS,KAAK,CAAC;QAC1B;QACD;;QAEAW,YAAY,EAAEA,CAAChB,MAAM,EAAEC,KAAK,EAAEC,IAAI,KAAK;UAAG;UAClC,MAAMe,IAAI,GAAGjB,MAAM,CAACkB,GAAG,CAACJ,KAAK,IAAI;YAAE,OAAO;cAACX,IAAI,EAAE,OAAO;cAAEC,EAAE,EAAEU,KAAK,CAACV;YAAE,CAAC;UAAC,CAAC,CAAC;UAC1Ea,IAAI,CAACE,IAAI,CAAC;YAAChB,IAAI,EAAE,aAAa;YAAEC,EAAE,EAAEF,IAAI,CAACE;UAAE,CAAC,CAAC;UAC7C,OAAOa,IAAI;QACf,CAAC;QAEDZ,KAAK,EAAGH,IAAI,IAAI;UACZ,OAAO;YACHI,GAAG,EAAE,SAAS;YACdc,MAAM,EAAE;cAACX,MAAM,EAAEP,IAAI,CAACE;YAAE,CAAC;YACzBG,MAAM,EAAE;UACZ,CAAC;QACL;MACJ,CAAC;IACL,CAAC;EACL;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEc,mBAAmB;EAAEC,mBAAmB;EAAEC;AAAuB,CAAC,GAAGnC,SAAS;AAC7F,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}