{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { faker } from '@faker-js/faker';\nconst photosApi = createApi({\n  reducerPath: 'photos',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3005'\n  }),\n  endpoints(builder) {\n    return {\n      fetchPhotos: builder.query({\n        providesTags: (result, error, album) => {\n          const tags = result.map(photo => {\n            return {\n              type: 'Photo',\n              id: photo.id\n            };\n          });\n          tags.push({\n            type: 'AlbumPhoto',\n            id: album.id\n          });\n          return tags;\n        },\n        query: album => {\n          return {\n            url: '/photos',\n            params: {\n              albumId: album.id\n            },\n            method: 'GET'\n          };\n        }\n      }),\n      addPhoto: builder.mutation({\n        invalidatesTags: (result, error, album) => {\n          return [{\n            type: 'AlbumPhoto',\n            id: album.id\n          }];\n        },\n        query: album => {\n          return {\n            method: 'POST',\n            url: '/photos',\n            body: {\n              albumId: album.id,\n              url: faker.image.abstract(150, 150, true)\n            }\n          };\n        }\n      }),\n      removePhoto: builder.mutation({\n        invalidatesTags: (result, error, photo) => {\n          return [{\n            type: 'Photo',\n            id: photo.id\n          }];\n        },\n        query: photo => {\n          return {\n            method: 'DELETE',\n            url: `/photos/${photo.id}`\n          };\n        }\n      })\n    };\n  }\n});\nexport const {\n  useFetchPhotosQuery,\n  useAddPhotoMutation,\n  useRemovePhotoMutation\n} = photosApi;\nexport { photosApi };","map":{"version":3,"names":["createApi","fetchBaseQuery","faker","photosApi","reducerPath","baseQuery","baseUrl","endpoints","builder","fetchPhotos","query","providesTags","result","error","album","tags","map","photo","type","id","push","url","params","albumId","method","addPhoto","mutation","invalidatesTags","body","image","abstract","removePhoto","useFetchPhotosQuery","useAddPhotoMutation","useRemovePhotoMutation"],"sources":["C:/Users/sebva/Downloads/Media-ReduxToolkitQuery/src/store/apis/photosApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { faker } from '@faker-js/faker';\n\nconst photosApi = createApi({\n  reducerPath: 'photos',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3005',\n  }),\n  endpoints(builder) {\n    return {\n      fetchPhotos: builder.query({\n        providesTags: (result, error, album) => {\n          const tags = result.map((photo) => {\n            return { type: 'Photo', id: photo.id };\n          });\n          tags.push({ type: 'AlbumPhoto', id: album.id });\n          return tags;\n        },\n        query: (album) => {\n          return {\n            url: '/photos',\n            params: {\n              albumId: album.id,\n            },\n            method: 'GET',\n          };\n        },\n      }),\n      addPhoto: builder.mutation({\n        invalidatesTags: (result, error, album) => {\n          return [{ type: 'AlbumPhoto', id: album.id }];\n        },\n        query: (album) => {\n          return {\n            method: 'POST',\n            url: '/photos',\n            body: {\n              albumId: album.id,\n              url: faker.image.abstract(150, 150, true),\n            },\n          };\n        },\n      }),\n      removePhoto: builder.mutation({\n        invalidatesTags: (result, error, photo) => {\n          return [{ type: 'Photo', id: photo.id }];\n        },\n        query: (photo) => {\n          return {\n            method: 'DELETE',\n            url: `/photos/${photo.id}`,\n          };\n        },\n      }),\n    };\n  },\n});\n\nexport const {\n  useFetchPhotosQuery,\n  useAddPhotoMutation,\n  useRemovePhotoMutation,\n} = photosApi;\nexport { photosApi };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,MAAMC,SAAS,GAAGH,SAAS,CAAC;EAC1BI,WAAW,EAAE,QAAQ;EACrBC,SAAS,EAAEJ,cAAc,CAAC;IACxBK,OAAO,EAAE;EACX,CAAC,CAAC;EACFC,SAASA,CAACC,OAAO,EAAE;IACjB,OAAO;MACLC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAC;QACzBC,YAAY,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;UACtC,MAAMC,IAAI,GAAGH,MAAM,CAACI,GAAG,CAAEC,KAAK,IAAK;YACjC,OAAO;cAAEC,IAAI,EAAE,OAAO;cAAEC,EAAE,EAAEF,KAAK,CAACE;YAAG,CAAC;UACxC,CAAC,CAAC;UACFJ,IAAI,CAACK,IAAI,CAAC;YAAEF,IAAI,EAAE,YAAY;YAAEC,EAAE,EAAEL,KAAK,CAACK;UAAG,CAAC,CAAC;UAC/C,OAAOJ,IAAI;QACb,CAAC;QACDL,KAAK,EAAGI,KAAK,IAAK;UAChB,OAAO;YACLO,GAAG,EAAE,SAAS;YACdC,MAAM,EAAE;cACNC,OAAO,EAAET,KAAK,CAACK;YACjB,CAAC;YACDK,MAAM,EAAE;UACV,CAAC;QACH;MACF,CAAC,CAAC;MACFC,QAAQ,EAAEjB,OAAO,CAACkB,QAAQ,CAAC;QACzBC,eAAe,EAAEA,CAACf,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;UACzC,OAAO,CAAC;YAAEI,IAAI,EAAE,YAAY;YAAEC,EAAE,EAAEL,KAAK,CAACK;UAAG,CAAC,CAAC;QAC/C,CAAC;QACDT,KAAK,EAAGI,KAAK,IAAK;UAChB,OAAO;YACLU,MAAM,EAAE,MAAM;YACdH,GAAG,EAAE,SAAS;YACdO,IAAI,EAAE;cACJL,OAAO,EAAET,KAAK,CAACK,EAAE;cACjBE,GAAG,EAAEnB,KAAK,CAAC2B,KAAK,CAACC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI;YAC1C;UACF,CAAC;QACH;MACF,CAAC,CAAC;MACFC,WAAW,EAAEvB,OAAO,CAACkB,QAAQ,CAAC;QAC5BC,eAAe,EAAEA,CAACf,MAAM,EAAEC,KAAK,EAAEI,KAAK,KAAK;UACzC,OAAO,CAAC;YAAEC,IAAI,EAAE,OAAO;YAAEC,EAAE,EAAEF,KAAK,CAACE;UAAG,CAAC,CAAC;QAC1C,CAAC;QACDT,KAAK,EAAGO,KAAK,IAAK;UAChB,OAAO;YACLO,MAAM,EAAE,QAAQ;YAChBH,GAAG,EAAG,WAAUJ,KAAK,CAACE,EAAG;UAC3B,CAAC;QACH;MACF,CAAC;IACH,CAAC;EACH;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXa,mBAAmB;EACnBC,mBAAmB;EACnBC;AACF,CAAC,GAAG/B,SAAS;AACb,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}