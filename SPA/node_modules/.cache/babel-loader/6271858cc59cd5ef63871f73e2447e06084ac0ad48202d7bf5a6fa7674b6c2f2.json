{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchUsers } from '../thunks/fetchUsers';\nimport { addUser } from '../thunks/addUser';\nimport { removeUser } from '../thunks/removeUser';\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    isLoading: false,\n    data: [],\n    error: null\n  },\n  //extraReducers håndtere action typer der ikke er givet af slicens state (isLoading, data og error)\n  //Thunk-funktionerne (fetchUsers, addUser og removeUser) sender action objekter med typerne: \"pending\", \"fulfilled\" og \"rejected\")\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchUsers.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n    builder.addCase(addUser.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(addUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data.push(action.payload);\n    });\n    builder.addCase(addUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n    builder.addCase(removeUser.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(removeUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data = state.data.filter(user => {\n        return user.id !== action.payload.id;\n      });\n    });\n    builder.addCase(removeUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  }\n});\nexport const usersReducer = usersSlice.reducer;","map":{"version":3,"names":["createSlice","fetchUsers","addUser","removeUser","usersSlice","name","initialState","isLoading","data","error","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","push","filter","user","id","usersReducer","reducer"],"sources":["C:/Users/sebva/Downloads/Media-ReduxToolkitQuery/src/store/slices/usersSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { fetchUsers } from '../thunks/fetchUsers';\nimport { addUser } from '../thunks/addUser';\nimport { removeUser } from '../thunks/removeUser';\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    isLoading: false,\n    data: [],\n    error: null,\n  },\n  //extraReducers håndtere action typer der ikke er givet af slicens state (isLoading, data og error)\n  //Thunk-funktionerne (fetchUsers, addUser og removeUser) sender action objekter med typerne: \"pending\", \"fulfilled\" og \"rejected\")\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchUsers.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchUsers.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n\n    builder.addCase(addUser.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(addUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data.push(action.payload);\n    });\n    builder.addCase(addUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n\n    builder.addCase(removeUser.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(removeUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data = state.data.filter((user) => {\n        return user.id !== action.payload.id;\n      });\n    });\n    builder.addCase(removeUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  },\n});\n\nexport const usersReducer = usersSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,MAAMC,UAAU,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,SAAS,EAAE,KAAK;IAChBC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE;EACT,CAAC;EACD;EACA;EACAC,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CAACC,OAAO,CAACX,UAAU,CAACY,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACP,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACX,UAAU,CAACe,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,IAAI,GAAGO,MAAM,CAACE,OAAO;IAC7B,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACX,UAAU,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACN,KAAK;IAC5B,CAAC,CAAC;IAEFE,OAAO,CAACC,OAAO,CAACV,OAAO,CAACW,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClDD,KAAK,CAACP,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACV,OAAO,CAACc,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,IAAI,CAACW,IAAI,CAACJ,MAAM,CAACE,OAAO,CAAC;IACjC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACV,OAAO,CAACgB,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACnDD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACN,KAAK;IAC5B,CAAC,CAAC;IAEFE,OAAO,CAACC,OAAO,CAACT,UAAU,CAACU,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACP,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACT,UAAU,CAACa,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,IAAI,GAAGM,KAAK,CAACN,IAAI,CAACY,MAAM,CAAEC,IAAI,IAAK;QACvC,OAAOA,IAAI,CAACC,EAAE,KAAKP,MAAM,CAACE,OAAO,CAACK,EAAE;MACtC,CAAC,CAAC;IACJ,CAAC,CAAC;IACFX,OAAO,CAACC,OAAO,CAACT,UAAU,CAACe,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACN,KAAK;IAC5B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAMc,YAAY,GAAGnB,UAAU,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}